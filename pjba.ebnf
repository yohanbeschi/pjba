(*
  =: symbol definition
  |: choice (eg. x or y)
  []: optional
  (): group (usually used with |)
  {}: 0 or more
  <>: 1 or more
  'value': constant (terminal string)
  "value": constant (terminal string)
  (* comment *)
  ? All UTF-8 characters ?: description of a terminal string (to avoid complex or over-describing grammar)
  -: exception (string = '"' {character - '"'} '"')
*)

pjba = <class>
class = classStartDir classModifiers className methods classEndDir
methods = {method}
method = methodStartDir methodModifiers methodName
         methodSignature methodContent methodEndDir
className = identifier {identifierSeparator identifier}
methodName = identifier
methodSignature = parametersStart parametersDescriptor parametersEnd returnDescriptor
parametersDescriptor = descriptor {descriptor}
returnDescriptor = descriptor | 'V'
methodContent = {instruction}
instruction = mnemonic {arg}
identifier = asciiJavaLetter {asciiJavaLetter | digit}
mnemonic = ? known mnemonic ?
arg = ? authorized argument for mnemonic ?
classModifiers = {classModifier}
methodModifiers = {methodModifier}
classStartIdentifier = '.class'
classEndIdentifier = '.endclass'
methodStartIdentifier = '.method'
methodEndIdentifier = '.endMethod'
classModifier = 'public' | 'final' | 'abstract' | 'interface' | 'super'
methodsModifier = 'public' | 'protected' | 'private' | 'static' | 'final'
                |Â 'strictfp' | 'synchronized' | 'abstract'  | 'native'
descriptor = 'B' | 'C' | 'D' | 'F' | 'I' | 'J' | 'S' | 'Z' |
             '['descriptor | 'L' className ';'
parametersStart = '('
parametersEnd = ')'
identifierSeparator = '/'
comment = singlelineComment | multilineComment
singlelineComment = ('@' | '#') ? All characters but LF and EOF ? (LF | EOF)
multilineComment = '/*' ? All UTF-8 characters but '*/'? '*/'
asciiJavaLetter = ? a-z | A-Z | '_' | '$' ?
digit = ? 0-9 ?